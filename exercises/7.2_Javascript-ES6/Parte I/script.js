/*
1 ðŸš€ - Crie um erro personalizado que serÃ¡ chamado se a pessoa usuÃ¡ria digitar apenas um nÃºmero.
Tente executar a aplicaÃ§Ã£o com um dos valores em branco. Notou que o retorno nÃ£o Ã© muito descritivo?
Utilize o throw new Error e o bloco try/catch.
Imprima o erro no parÃ¡grafo com id result, para que a pessoa usuÃ¡ria saiba o que aconteceu. Lembre-se de usar erros descritivos!
Evite funÃ§Ãµes que tenham muitas responsabilidades distintas.
2 ðŸš€ - Agora adicione uma outra exceÃ§Ã£o, caso a pessoa usuÃ¡ria digite um valor que nÃ£o seja numÃ©rico.
VocÃª pode fazer essa verificaÃ§Ã£o utilizando a funÃ§Ã£o isNan().
3 ðŸš€ - VocÃª se lembrou de limpar os inputs apÃ³s o clique do botÃ£o? Teve que repetir cÃ³digo para isso? Que tal refatorar sua funÃ§Ã£o utilizando o finally?
*/

const verifyIsNumber = (value1, value2) => {
    if (isNaN(parseInt(value1)) || isNaN(parseInt(value2))) {
        throw new Error('Ambos os campos devem ser preenchidos com valor numÃ©rico')
    }
  };

function sum() {
    const value1 = document.getElementById('value1').value;
    const value2 = document.getElementById('value2').value;
    const result = parseInt(value1) + parseInt(value2);
    let sum =  document.getElementById('result')
    try {
        verifyIsNumber(value1, value2);
        sum.innerHTML = `Resultado: ${result}`;
        return sum;
    } catch (error) {
        sum.innerHTML = error.message;
        return sum;
    } finally {
        document.getElementById('value1').value = '';
        document.getElementById('value2').value = '';
    }
};

window.onload = () => {
    const button = document.getElementById('button');
    button.addEventListener('click', sum);
}